from pathlib import Path
from utils.env import get_env

def gen_ping_check(files):
    
    cur_dir = Path(__file__).parent
    with open(cur_dir.parent / "ping_check" / "ping_check_runner.py", "w") as scr:
        ips = {master.ip: [group.effective_id for group in master.slaves.values()] for group in files.values() for master in group}
        scr.write(f"""
#!/usr/bin/env python3
# AUTOGENERATED FILE, DO NOT EDIT

from multiping import multi_ping
import time
import requests
from datetime import datetime
import os

ips={ips!r}

def get_env(key):
    if val := os.getenv(key):
        return val
    else:
        raise ValueError(f"Environment variable {{key}} not set")

OH_ROOT = get_env("OPENHAB_URL")
OH_TOKEN = get_env("OPENHAB_TOKEN")

cache = {{}}

def send_openhab(id: str, val: bool):
    if cache.get(id) == val:
        return
    cache[id] = val
    url = f"{{OH_ROOT}}/rest/things/modbus:tcp:{{id}}/enable"
    (payload, message) = ("true", "Enabling") if val else ("false", "Disabling")
    print(f"[{{datetime.now()}}] {{message}} {{id}}")
    headers = {{
        "Content-Type": "text/plain",
        "Authorization": "Bearer {{OH_TOKEN}}",
    }}
    requests.put(url, data=payload, headers=headers)

while True:
    good, bad = multi_ping(ips.keys(), timeout=0.2, retry=0)
    for ip in good:
        for id in ips[ip]:
            send_openhab(id, True)
    for ip in bad:
        for id in ips[ip]:
            send_openhab(id, False)
    time.sleep(5)
""")